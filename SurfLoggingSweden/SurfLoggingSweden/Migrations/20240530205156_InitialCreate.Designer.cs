// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SurfLoggingSweden.Data;

#nullable disable

namespace SurfLoggingSweden.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20240530205156_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("SurfLoggingSweden.Entities.SurfSession", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("End")
                        .HasColumnType("datetime2");

                    b.Property<int>("Rating")
                        .HasColumnType("int");

                    b.Property<DateTime>("Start")
                        .HasColumnType("datetime2");

                    b.Property<int>("SurfSpotId")
                        .HasColumnType("int");

                    b.Property<int>("WindDegree")
                        .HasColumnType("int");

                    b.Property<int>("WindPower")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SurfSpotId");

                    b.ToTable("SurfSessions");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            End = new DateTime(2024, 5, 1, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            Rating = 4,
                            Start = new DateTime(2024, 5, 1, 8, 0, 0, 0, DateTimeKind.Unspecified),
                            SurfSpotId = 1,
                            WindDegree = 190,
                            WindPower = 15
                        },
                        new
                        {
                            Id = 2,
                            End = new DateTime(2024, 5, 2, 11, 0, 0, 0, DateTimeKind.Unspecified),
                            Rating = 3,
                            Start = new DateTime(2024, 5, 2, 9, 0, 0, 0, DateTimeKind.Unspecified),
                            SurfSpotId = 2,
                            WindDegree = 200,
                            WindPower = 20
                        },
                        new
                        {
                            Id = 3,
                            End = new DateTime(2024, 5, 3, 12, 0, 0, 0, DateTimeKind.Unspecified),
                            Rating = 5,
                            Start = new DateTime(2024, 5, 3, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            SurfSpotId = 3,
                            WindDegree = 210,
                            WindPower = 10
                        },
                        new
                        {
                            Id = 4,
                            End = new DateTime(2024, 5, 4, 9, 0, 0, 0, DateTimeKind.Unspecified),
                            Rating = 2,
                            Start = new DateTime(2024, 5, 4, 7, 0, 0, 0, DateTimeKind.Unspecified),
                            SurfSpotId = 4,
                            WindDegree = 220,
                            WindPower = 25
                        },
                        new
                        {
                            Id = 5,
                            End = new DateTime(2024, 5, 5, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            Rating = 1,
                            Start = new DateTime(2024, 5, 5, 8, 0, 0, 0, DateTimeKind.Unspecified),
                            SurfSpotId = 1,
                            WindDegree = 230,
                            WindPower = 30
                        },
                        new
                        {
                            Id = 6,
                            End = new DateTime(2024, 5, 6, 11, 0, 0, 0, DateTimeKind.Unspecified),
                            Rating = 4,
                            Start = new DateTime(2024, 5, 6, 9, 0, 0, 0, DateTimeKind.Unspecified),
                            SurfSpotId = 2,
                            WindDegree = 240,
                            WindPower = 12
                        },
                        new
                        {
                            Id = 7,
                            End = new DateTime(2024, 5, 7, 12, 0, 0, 0, DateTimeKind.Unspecified),
                            Rating = 3,
                            Start = new DateTime(2024, 5, 7, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            SurfSpotId = 3,
                            WindDegree = 250,
                            WindPower = 18
                        },
                        new
                        {
                            Id = 8,
                            End = new DateTime(2024, 5, 8, 13, 0, 0, 0, DateTimeKind.Unspecified),
                            Rating = 5,
                            Start = new DateTime(2024, 5, 8, 11, 0, 0, 0, DateTimeKind.Unspecified),
                            SurfSpotId = 4,
                            WindDegree = 260,
                            WindPower = 22
                        });
                });

            modelBuilder.Entity("SurfLoggingSweden.Entities.SurfSpot", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("SurfSpots");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Location = "Location A",
                            Name = "Apelviken"
                        },
                        new
                        {
                            Id = 2,
                            Location = "Location B",
                            Name = "Skrea Strand"
                        },
                        new
                        {
                            Id = 3,
                            Location = "Location C",
                            Name = "Läjet"
                        },
                        new
                        {
                            Id = 4,
                            Location = "Location D",
                            Name = "Kåsa"
                        });
                });

            modelBuilder.Entity("SurfLoggingSweden.Entities.SurfSession", b =>
                {
                    b.HasOne("SurfLoggingSweden.Entities.SurfSpot", "SurfSpot")
                        .WithMany("SurfSessions")
                        .HasForeignKey("SurfSpotId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SurfSpot");
                });

            modelBuilder.Entity("SurfLoggingSweden.Entities.SurfSpot", b =>
                {
                    b.Navigation("SurfSessions");
                });
#pragma warning restore 612, 618
        }
    }
}
